@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;
<div class="panel panel-default tools">
    <div class="panel-heading">
        <h4 class="panel-title" id="main-menu-toggle" data-target="ContentSlides"  data-submenu-caret-class="pe-7s-angle-left" data-menu-visible="true" data-submenu-animate-caret="rotate">
            <a data-toggle="collapse" data-parent="#accordion" href="#PanelTwo" class="collapsed">
                <i class="fa fa-plus"></i><br>
                Add content slides
            </a>
        </h4>
    </div>
    <div id="PanelTwo" class="panel-collapse collapse">
        <div id="ContentSlides" class="panel-body">
            <ul class="main-menu" class="level1">
                @foreach (var node in Model.Nodes)
                {
                    @RenderRootLevelNode(node)
                }
            </ul>
        </div>
    </div>
</div>

<script type="text/javascript">
    var availablePages = {
        'rootPages': [
            @RenderAvailablePages()
        ]
    };
    //log(JSON.stringify(availablePages));
</script>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
if (node.ChildNodes.Count > 0)
{
        <li class="@GetClass(node)">
            <a href="#" class="@node.Title.ToLower()">
                <i class="fa fa-square-o"></i>
                @node.Title
                <span class="pe-7s-angle-left pull-right"></span>
            </a>
            <ul class="level2">
                @RenderSubLevelsRecursive(node)
            </ul>
        </li>
}
else
{
    <li class="@GetClass(node)"><span data-slide-url="@node.Url" class="my-presentation-add"><i class="fa fa-square-o"></i> @node.Title</span></li>
}
}

@*Here is specified the rendering for the root level JSON*@
@helper RenderAvailablePages()
{
foreach (var node in Model.Nodes)
{
        @Html.Raw("{ ");
        @Html.Raw("'title': '" + @node.Title + "', ");
        @Html.Raw("'url': '" + @node.Url + "', ");
        //@Html.Raw("'active': '" + @node.IsCurrentlyOpened.ToString().ToLower() + "', ");
        @Html.Raw("'subPages': [ " + RenderAvailableSubPages(node) + "] }, ");
    }
}

@*Here is specified the rendering for level2 *@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
foreach (var childNode in node.ChildNodes)
{
    <li class="@GetClass(childNode)">
        <span class="my-presentation-add" data-slide-url="@childNode.Url"><i class="fa fa-square-o"></i> @childNode.Title</span>
    </li>
}
}
@*Here is specified the rendering for level2 *@
@helper RenderAvailableSubPages(NodeViewModel node)
{
foreach (var childNode in node.ChildNodes)
{
        @Html.Raw("{ ");
        @Html.Raw("'title': '" + @childNode.Title + "', ");
        @Html.Raw("'parentTitle': '" + @node.Title + "', ");
        @Html.Raw("'url': '" + @childNode.Url + "', ");
        @Html.Raw("'active': '" + @childNode.IsCurrentlyOpened.ToString().ToLower() + "', ");
        @Html.Raw("}, ");
    }
}




@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

if (node.IsCurrentlyOpened)
{
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}
